import * as assert from 'assert';
import Enumerable from './Enumerable';

import aggregate from '../src/hof/aggregate';
import all from '../src/hof/all';
import any from '../src/hof/any';
import average from '../src/hof/average';
import buffer from '../src/hof/buffer';
import _catch from '../src/hof/catch';
import concat from '../src/hof/concat';
import count from '../src/hof/count';
import defaultIfEmpty from '../src/hof/defaultIfEmpty';
import distinct from '../src/hof/distinct';
import distinctUntilChanged from '../src/hof/distinctUntilChanged';
import _do from '../src/hof/do';
import doWhile from '../src/hof/doWhile';
import elementAt from '../src/hof/elementAt';
import elementAtOrDefault from '../src/hof/elementAtOrDefault';
import except from '../src/hof/except';
import _finally from '../src/hof/finally';
import first from '../src/hof/first';
import firstOrDefault from '../src/hof/firstOrDefault';
import forEach from '../src/hof/forEach';
import groupBy from '../src/hof/groupBy';
import groupJoin from '../src/hof/groupJoin';
import ignoreElements from '../src/hof/ignoreElements';
import intersect from '../src/hof/intersect';
import isEmpty from '../src/hof/isEmpty';
import join from '../src/hof/join';
import last from '../src/hof/last';
import lastOrDefault from '../src/hof/lastOrDefault';
import max from '../src/hof/max';
import maxBy from '../src/hof/maxBy';
import memoize from '../src/hof/memoize';
import min from '../src/hof/min';
import minBy from '../src/hof/minBy';
import onErrorResumeNext from '../src/hof/onErrorResumeNext';
import orderBy from '../src/hof/orderBy';
import orderByDescending from '../src/hof/orderByDescending';
import repeat from '../src/hof/repeat';
import retry from '../src/hof/retry';
import reverse from '../src/hof/reverse';
import scan from '../src/hof/scan';
import select from '../src/hof/select';
import selectMany from '../src/hof/selectMany';
import single from '../src/hof/single';
import singleOrDefault from '../src/hof/singleOrDefault';
import skip from '../src/hof/skip';
import skipLast from '../src/hof/skipLast';
import skipWhile from '../src/hof/skipWhile';
import startWith from '../src/hof/startWith';
import sum from '../src/hof/sum';
import take from '../src/hof/take';
import takeLast from '../src/hof/takeLast';
import takeWhile from '../src/hof/takeWhile';
import toArray from '../src/hof/toArray';
import toDictionary from '../src/hof/toDictionary';
import toLookup from '../src/hof/toLookup';
import toObject from '../src/hof/toObject';
import union from '../src/hof/union';
import where from '../src/hof/where';
import _while from '../src/hof/while';
import zip from '../src/hof/zip';

describe('let()', () => {
    it('can passes a higher-order functions', () => {
        assert.deepEqual(new Enumerable([1, 2]).let(aggregate(0, (acc, x) => acc + x)), 3);
        assert.strictEqual(new Enumerable([]).let(all(x => x)), true);
        assert.strictEqual(new Enumerable([]).let(any(x => x)), false);
        assert.strictEqual(new Enumerable([1]).let(average(x => x)), 1);
        assert.deepEqual(new Enumerable([]).let(buffer(1)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(_catch(() => [])).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(concat([])).toArray(), []);
        assert.strictEqual(new Enumerable([]).let(count()), 0);
        assert.deepEqual(new Enumerable([]).let(defaultIfEmpty(1)).toArray(), [1]);
        assert.deepEqual(new Enumerable([]).let(distinct(x => x)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(distinctUntilChanged(x => x)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(_do(() => {})).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(doWhile(() => false)).toArray(), []);
        assert.strictEqual(new Enumerable([]).let(elementAtOrDefault(0, 1)), 1);
        assert.strictEqual(new Enumerable([1]).let(elementAt(0)), 1);
        assert.deepEqual(new Enumerable([]).let(except([])).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(_finally(() => {})).toArray(), []);
        assert.strictEqual(new Enumerable([1]).let(first(() => true)), 1);
        assert.strictEqual(new Enumerable([]).let(firstOrDefault(() => true, 1)), 1);
        assert.strictEqual(new Enumerable([]).let(forEach(() => {})), undefined);
        assert.deepEqual(new Enumerable([]).let(groupBy(() => '')).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(groupJoin([], x => x, y => y, (x, ys) => [x, ys])).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(ignoreElements()).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(intersect([])).toArray(), []);
        assert.strictEqual(new Enumerable([]).let(isEmpty()), true);
        assert.deepEqual(new Enumerable([]).let(join([], x => x, y => y, (x, y) => [x, y])).toArray(), []);
        assert.strictEqual(new Enumerable([]).let(lastOrDefault(() => true, 1)), 1);
        assert.strictEqual(new Enumerable([1]).let(last(() => true)), 1);
        assert.strictEqual(new Enumerable([1]).let(max(x => x)), 1);
        assert.deepEqual(new Enumerable([]).let(maxBy(x => x)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(memoize()).toArray(), []);
        assert.strictEqual(new Enumerable([1]).let(min(x => x)), 1);
        assert.deepEqual(new Enumerable([]).let(minBy(x => x)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(onErrorResumeNext([])).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(orderBy(x => x)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(orderByDescending(x => x)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(repeat(1)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(retry(0)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(reverse()).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(scan([0], (acc, x) => [...acc, x])).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(selectMany(x => [x])).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(select(x => x)).toArray(), []);
        assert.strictEqual(new Enumerable([1]).let(single(() => true)), 1);
        assert.strictEqual(new Enumerable([]).let(singleOrDefault(() => true, 1)), 1);
        assert.deepEqual(new Enumerable([]).let(skip(0)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(skipLast(0)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(skipWhile((x) => false)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(startWith(1)).toArray(), [1]);
        assert.strictEqual(new Enumerable([]).let(sum()), 0);
        assert.deepEqual(new Enumerable([]).let(take(0)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(takeLast(0)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(takeWhile(() => false)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(toArray()), []);
        assert(new Enumerable([]).let(toDictionary(x => x, x => x)) instanceof Map);
        assert(new Enumerable([]).let(toLookup(x => x, x => x)) instanceof Map);
        assert.deepEqual(new Enumerable([]).let(toObject(x => x + '', x => x)), {});
        assert.deepEqual(new Enumerable([]).let(union([])).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(where(() => true)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(_while(() => false)).toArray(), []);
        assert.deepEqual(new Enumerable([]).let(zip([], (x, y) => [x, y])).toArray(), []);
    });
});
