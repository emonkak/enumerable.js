import * as assert from 'assert';
import Enumerable from './Enumerable';

import _catch from '../src/hof/catch';
import _do from '../src/hof/do';
import _finally from '../src/hof/finally';
import _while from '../src/hof/while';
import buffer from '../src/hof/buffer';
import concat from '../src/hof/concat';
import defaultIfEmpty from '../src/hof/defaultIfEmpty';
import distinct from '../src/hof/distinct';
import distinctUntilChanged from '../src/hof/distinctUntilChanged';
import doWhile from '../src/hof/doWhile';
import except from '../src/hof/except';
import groupBy from '../src/hof/groupBy';
import groupJoin from '../src/hof/groupJoin';
import ignoreElements from '../src/hof/ignoreElements';
import intersect from '../src/hof/intersect';
import join from '../src/hof/join';
import memoize from '../src/hof/memoize';
import onErrorResumeNext from '../src/hof/onErrorResumeNext';
import orderBy from '../src/hof/orderBy';
import orderByDescending from '../src/hof/orderByDescending';
import repeat from '../src/hof/repeat';
import retry from '../src/hof/retry';
import reverse from '../src/hof/reverse';
import scan from '../src/hof/scan';
import select from '../src/hof/select';
import selectMany from '../src/hof/selectMany';
import skip from '../src/hof/skip';
import skipLast from '../src/hof/skipLast';
import skipWhile from '../src/hof/skipWhile';
import startWith from '../src/hof/startWith';
import take from '../src/hof/take';
import takeLast from '../src/hof/takeLast';
import takeWhile from '../src/hof/takeWhile';
import union from '../src/hof/union';
import where from '../src/hof/where';
import zip from '../src/hof/zip';

describe('pipe()', () => {
    it('can passes a higher-order functions', () => {
        assert.deepEqual(new Enumerable([]).pipe(buffer(1)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(_catch(() => [])).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(concat([])).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(defaultIfEmpty(1)).toArray(), [1]);
        assert.deepEqual(new Enumerable([]).pipe(distinct(x => x)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(distinctUntilChanged(x => x)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(_do(() => {})).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(doWhile(() => false)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(except([])).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(_finally(() => {})).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(groupBy(() => '')).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(groupJoin([], x => x, y => y, (x, ys) => [x, ys])).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(ignoreElements()).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(intersect([])).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(join([], x => x, y => y, (x, y) => [x, y])).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(memoize()).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(onErrorResumeNext([])).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(orderBy(x => x)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(orderByDescending(x => x)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(repeat(1)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(retry(0)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(reverse()).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(scan([0], (acc, x) => [...acc, x])).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(selectMany(x => [x])).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(select(x => x)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(skip(0)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(skipLast(0)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(skipWhile((x) => false)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(startWith(1)).toArray(), [1]);
        assert.deepEqual(new Enumerable([]).pipe(take(0)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(takeLast(0)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(takeWhile(() => false)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(union([])).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(where(() => true)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(_while(() => false)).toArray(), []);
        assert.deepEqual(new Enumerable([]).pipe(zip([], (x, y) => [x, y])).toArray(), []);
    });
});

